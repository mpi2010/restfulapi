1
00:00:02,020 --> 00:00:04,010
This class we are going to apply.

2
00:00:04,030 --> 00:00:08,210
Well we already know a barbed middlewars on Laravel.

3
00:00:08,640 --> 00:00:14,520
For these we are going to create a custom middleware that is going to do a simple stew.

4
00:00:14,780 --> 00:00:22,810
It is going to add a signature in the headers of every response of our restful API let's proceed.

5
00:00:22,820 --> 00:00:28,970
And in that way we are going to learn some new stew to create a middleware we just need to use the

6
00:00:28,970 --> 00:00:30,880
PHP are D.S. comment.

7
00:00:33,700 --> 00:00:34,650
Make middleware

8
00:00:40,340 --> 00:00:43,760
that middleware is going to be called SignitureMiddleware.

9
00:00:53,700 --> 00:01:03,680
Now if we go to our code we can found our new middleware in the app HTP middleware Father there is the

10
00:01:03,680 --> 00:01:05,350
signature of middleware.

11
00:01:05,750 --> 00:01:08,260
So this middleware is going to be very simple.

12
00:01:08,330 --> 00:01:16,400
We are going to add the signature of our restful API with a custom header in their response so we are

13
00:01:16,460 --> 00:01:19,230
acting over their response.

14
00:01:19,250 --> 00:01:24,510
That means that we are going to act AFTER UPDATE No response.

15
00:01:24,530 --> 00:01:28,770
So it is now after middleware.

16
00:01:28,920 --> 00:01:36,010
So we just need to assign the value of the responses obtained from the other middlewares and the concern

17
00:01:36,010 --> 00:01:36,980
is at the end

18
00:01:40,940 --> 00:01:43,270
and then act over data response.

19
00:01:43,280 --> 00:01:46,330
So we are going to add a custom header.

20
00:01:46,670 --> 00:01:51,340
So we just need to access the header attribute from the response

21
00:02:02,900 --> 00:02:08,290
and this method is going to receive the name of the header and the value of these.

22
00:02:08,440 --> 00:02:10,370
So the name is going to be variable

23
00:02:16,540 --> 00:02:23,080
and the value is going to be always the name of our application so we can obtain it directly from the

24
00:02:23,080 --> 00:02:24,660
configuration file.

25
00:02:30,090 --> 00:02:32,960
As they hear the name is a variable.

26
00:02:32,970 --> 00:02:39,450
It means that we are sure receive not reboot or a parameter in our handle method.

27
00:02:39,840 --> 00:02:41,640
So we just need to add these

28
00:02:46,710 --> 00:02:49,710
we are going to add a default name for these parameter

29
00:02:54,220 --> 00:03:01,360
that is going to be X-name we are using the X-Dasch at the beginning because these a very good practice.

30
00:03:01,660 --> 00:03:09,670
When we are adding custom headers to our response of course we don't have to do this by these are very

31
00:03:09,670 --> 00:03:15,410
good practice and where we have to follow the best practices possible.

32
00:03:15,430 --> 00:03:22,720
So once we added the how what to the response we just need to return the response.

33
00:03:31,320 --> 00:03:38,630
And we have now complete recreated our middleware the next step is to register them middleware every

34
00:03:38,630 --> 00:03:42,260
middleware is registered in that kernel file.

35
00:03:42,450 --> 00:03:44,450
There we have two different sections.

36
00:03:44,460 --> 00:03:52,690
We have the gloving meter worse and we have the middlwares gropes Nagler formular words are executed

37
00:03:52,810 --> 00:04:00,690
every time on every request independently if it is web api or any other kind of roads and the media

38
00:04:00,840 --> 00:04:04,330
groups are executed depending of their group.

39
00:04:04,330 --> 00:04:11,360
What we are using there is some limitation from the global media and that is that basically does or

40
00:04:11,370 --> 00:04:17,930
worse can not be named or worse than name either worse words are the media reports that we have in their

41
00:04:17,930 --> 00:04:18,630
road.

42
00:04:18,710 --> 00:04:25,400
Me There were attribute as you can see for example in the API middleware grow.

43
00:04:25,520 --> 00:04:33,300
We have two named middleware that brothel and the bindings headed the Web we can't use names to me

44
00:04:33,300 --> 00:04:34,310
their words as well.

45
00:04:34,500 --> 00:04:37,680
But unfortunately we can note duties here.

46
00:04:37,890 --> 00:04:44,340
Well we have to add these new middleware the SignaturMiddlewares that were recently created for every

47
00:04:44,340 --> 00:04:52,920
possible response in our system but these middlewares receives a parameters and unfortunately again

48
00:04:53,280 --> 00:04:58,450
we only can send parameters for the named middlewares.

49
00:04:58,470 --> 00:05:06,970
So that means that we can use it as sogged global middleware because we need to have a named middleware

50
00:05:07,050 --> 00:05:08,230
at the end.

51
00:05:08,370 --> 00:05:09,830
So it means that we have.

52
00:05:09,840 --> 00:05:12,670
Do you see it directly here.

53
00:05:13,060 --> 00:05:20,670
And because we want to use it directly in all the responses of our project independently if it is API

54
00:05:20,700 --> 00:05:21,480
or web.

55
00:05:21,750 --> 00:05:25,490
Basically we just need to add this in several groups.

56
00:05:25,560 --> 00:05:27,690
In this case we have an API.

57
00:05:27,690 --> 00:05:29,360
You have any other girl.

58
00:05:29,370 --> 00:05:32,620
Well you probably need to add these there as well.

59
00:05:34,860 --> 00:05:55,550
Now let's to register our new middleware we we're going to call the signature.

60
00:05:55,600 --> 00:05:57,030
Here we have these.

61
00:05:57,370 --> 00:06:01,430
And we can use it now by the name.

62
00:06:01,440 --> 00:06:04,650
The question now is were do to use these.

63
00:06:04,660 --> 00:06:05,310
middleware.

64
00:06:05,400 --> 00:06:08,530
Well let's think a little about that.

65
00:06:08,730 --> 00:06:14,220
Either word needs to add a new customer here and or forward their response.

66
00:06:14,220 --> 00:06:22,860
So that means that the world needs to act Ahlberg the response and over their modifications that any

67
00:06:22,950 --> 00:06:27,390
other either word does so because it isn't after me.

68
00:06:27,690 --> 00:06:29,000
There is not any problem.

69
00:06:29,010 --> 00:06:34,620
If we are this at the beginning of the least because it is going to leave the other middleware to

70
00:06:34,620 --> 00:06:35,620
be executed.

71
00:06:35,760 --> 00:06:44,280
And if any of that's middleware be the response it is going to automatically add the heater independently

72
00:06:44,310 --> 00:06:46,350
of the kind of response.

73
00:06:46,350 --> 00:06:54,010
So it is a good idea in this case to add these middleware at the first position of these lists

74
00:06:59,300 --> 00:07:06,050
in the way this motherboard is going to leave the other me that were two and for any kind of modification.

75
00:07:06,110 --> 00:07:13,340
And to be executed because for example if we add these after the throstle middleware if the throttle

76
00:07:13,340 --> 00:07:19,790
middleware fails in some way we are going to add the signature and that is not why we went.

77
00:07:19,790 --> 00:07:25,460
We really want to add the secret door in all the possible responses as we can.

78
00:07:25,580 --> 00:07:30,560
So again it is a good idea to use it in the first position.

79
00:07:30,560 --> 00:07:38,520
Now when it does sound preferably a parameter does me over that is the header name.

80
00:07:38,750 --> 00:07:46,920
And it is very easy in fact we just need to use a colon and pass the value of the parameter.

81
00:07:46,920 --> 00:07:49,530
In this case we just have one parameter.

82
00:07:49,680 --> 00:07:54,480
So we do need to send a new name to call these X

83
00:07:58,890 --> 00:08:06,720
application name in this way the new header is going to have X up location name as the index and not

84
00:08:06,730 --> 00:08:12,960
only X name that is the default the body is to find now how it is working.

85
00:08:12,960 --> 00:08:21,400
So if we go and try for example to obtain a list of users we can see in the headers how the X application

86
00:08:21,400 --> 00:08:27,950
name has been out to magically included with the name of our project that is wrastled API.

87
00:08:28,150 --> 00:08:37,010
If we try to perform any different request like for broader use again there is the header and it is

88
00:08:37,010 --> 00:08:44,180
going to work almost for all the possible responses that we have in our graceful API.

89
00:08:44,630 --> 00:08:53,860
And only when one when or where it is a b b helpful feature for the mail or worse because we are automatically

90
00:08:53,860 --> 00:08:57,430
executing these for on every request.

91
00:08:57,430 --> 00:08:59,310
So we are done now.

92
00:08:59,320 --> 00:09:01,050
See you in the next class.
